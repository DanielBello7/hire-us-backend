// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// holds all the user accounts within the application
model Account {
  id                  Int            @id @default(autoincrement())
  name                String
  email               String         @unique
  password            String
  role                String
  avatar              String?
  lastLogin           DateTime       @default(now())
  isEmailVerified     Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  Person              Person[]
  Admin               Admin[]
  Company             Company[]
  Message             Message[]
  CreatedBy           Conversation[] @relation("CreatedBy")
  ConversationMembers Conversation[] @relation("ConversationMembers")
  Upload              Upload[]
}

// holds all metadata about an employee
model Person {
  id        Int        @id @default(autoincrement())
  accountid Int
  account   Account    @relation(fields: [accountid], references: [id])
  name      String
  email     String     @unique
  username  String     @unique
  country   String
  address   String
  gender    String
  avatar    String?
  taxid     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Employee  Employee[]
}

// holds information about admins
model Admin {
  id        Int      @id @default(autoincrement())
  accountid Int
  account   Account  @relation(fields: [accountid], references: [id])
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// holds information about a registered company
model Company {
  id         Int          @id @default(autoincrement())
  accountid  Int
  account    Account      @relation(fields: [accountid], references: [id])
  title      String
  email      String       @unique
  country    String
  address    String
  avatar     String?
  brief      String?
  taxid      String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Employee   Employee[]
  Position   Position[]
  Branch     Branch[]
  Exam       Exam[]
  Payment    Payment[]
  Terminated Terminated[]
}

// holds information about an employee
model Employee {
  id         Int          @id @default(autoincrement())
  personid   Int
  person     Person       @relation(fields: [personid], references: [id])
  companyid  Int
  company    Company      @relation(fields: [companyid], references: [id])
  positionid Int?
  position   Position?    @relation(fields: [positionid], references: [id])
  terminated Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Branch     Branch[]
  Exam       Exam?        @relation(fields: [examid], references: [id])
  examid     Int?
  Progress   Progress[]
  Promotion  Promotion[]
  CreatedBy  Review[]     @relation("CreatedBy")
  CreatedFor Review[]     @relation("CreatedFor")
  Payment    Payment[]
  Response   Response[]
  Terminated Terminated[]
}

// details about a branch of the company
model Branch {
  id        Int       @id @default(autoincrement())
  country   String
  address   String
  companyid Int
  company   Company   @relation(fields: [companyid], references: [id])
  managerid Int?
  manager   Employee? @relation(fields: [managerid], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// company positions that can be applied for and held by employees
model Position {
  id           Int         @id @default(autoincrement())
  title        String
  companyid    Int
  company      Company     @relation(fields: [companyid], references: [id])
  successorid  Int?        @unique
  successor    Position?   @relation("PositionHistory", fields: [successorid], references: [id])
  predecessor  Position?   @relation("PositionHistory")
  salary       Int
  currency     String
  description  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Employee     Employee[]
  Exam         Exam?       @relation(fields: [examid], references: [id])
  examid       Int?
  fromPosition Promotion[] @relation("FromPosition")
  toPosition   Promotion[] @relation("ToPosition")
}

model Exam {
  id                  Int         @id @default(autoincrement())
  title               String
  questions           Int         @default(0)
  description         String
  companyid           Int
  company             Company     @relation(fields: [companyid], references: [id])
  eligiblePositions   Position[]
  ineligibleEmployees Employee[]
  availableAt         DateTime // ??
  startsAt            DateTime // date period of the year the exam starts 
  endsAt              DateTime // date period of the year the exam ends
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  Promotion           Promotion[]
  Progress            Progress[]
  Response            Response[]
}

model Question {
  id        Int        @id @default(autoincrement())
  index     Int        @unique
  examid    Int
  type      String
  body      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Options   Option[]
  Progress  Progress[]
  Response  Response[]
}

model Option {
  id          Int        @id @default(autoincrement())
  examid      Int
  questionid  Int
  question    Question   @relation(fields: [questionid], references: [id])
  body        String
  description String?
  correct     Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Response    Response[]
}

// holds information about the progress of an employee with an exam
model Progress {
  id             Int       @id @default(autoincrement())
  examid         Int
  exam           Exam      @relation(fields: [examid], references: [id])
  employeeid     Int
  employee       Employee  @relation(fields: [employeeid], references: [id])
  score          Int?
  completed      Boolean   @default(false)
  lastQuestionid Int?
  lastQuestion   Question? @relation(fields: [lastQuestionid], references: [id])
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// the metadata for the response an employee gives to a particular exam question
model Response {
  id         Int      @id @default(autoincrement())
  examid     Int
  exam       Exam     @relation(fields: [examid], references: [id])
  questionid Int
  question   Question @relation(fields: [questionid], references: [id])
  employeeid Int
  employee   Employee @relation(fields: [employeeid], references: [id])
  optionid   Int?
  option     Option?  @relation(fields: [optionid], references: [id])
  correct    Boolean
  body       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// metadata about the promotion that has happened for an employee
model Promotion {
  id             Int      @id @default(autoincrement())
  type           String
  examid         Int?
  exam           Exam?    @relation(fields: [examid], references: [id])
  employeeid     Int
  employee       Employee @relation(fields: [employeeid], references: [id])
  fromPositionid Int
  fromPosition   Position @relation("FromPosition", fields: [fromPositionid], references: [id])
  toPositionid   Int
  toPosition     Position @relation("ToPosition", fields: [toPositionid], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// metadata for conversations between accounts
model Conversation {
  id          Int       @id @default(autoincrement())
  members     Account[] @relation("ConversationMembers")
  createdByid Int
  createdBy   Account   @relation("CreatedBy", fields: [createdByid], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Message     Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  body           String
  media          String?
  mediaType      String?
  createdByid    Int
  conversationid Int
  conversation   Conversation @relation(fields: [conversationid], references: [id])
  createdBy      Account      @relation(fields: [createdByid], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Review {
  id           Int      @id @default(autoincrement())
  rating       Int
  body         String?
  createdByid  Int
  createdBy    Employee @relation("CreatedBy", fields: [createdByid], references: [id])
  createdForid Int
  createdFor   Employee @relation("CreatedFor", fields: [createdForid], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// holds record of a payment that's been made out to an employee
model Payment {
  id         Int      @id @default(autoincrement())
  employeeid Int
  employee   Employee @relation(fields: [employeeid], references: [id])
  amount     Int
  currency   String
  companyid  Int
  company    Company  @relation(fields: [companyid], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// holds record of when an employee is being relieved from their position
model Terminated {
  id         Int      @id @default(autoincrement())
  employeeid Int
  employee   Employee @relation(fields: [employeeid], references: [id])
  companyid  Int
  company    Company  @relation(fields: [companyid], references: [id])
  reason     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Upload {
  id        Int      @id @default(autoincrement())
  tempid    String   @unique
  accountid Int
  account   Account  @relation(fields: [accountid], references: [id])
  url       String
  title     String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
